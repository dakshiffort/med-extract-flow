import { useState } from 'react';
import { Header } from '@/components/Header';
import PDFUploader from '@/components/PDFUploader';
import { AuditResults } from '@/components/AuditResults';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { sendToWebhook } from '@/services/webhookService';
import { Loader2, Send } from 'lucide-react';

const Index = () => {
  const { toast } = useToast();
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [fileName, setFileName] = useState<string>('');
  const [auditResults, setAuditResults] = useState<string>('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [hasResults, setHasResults] = useState(false);

  const handleFileProcessed = (file: File, name: string) => {
    setUploadedFile(file);
    setFileName(name);
    setHasResults(false);
  };

  const handleSendToAudit = async () => {
    if (!uploadedFile || !fileName) {
      toast({
        title: "No file uploaded",
        description: "Please upload a PDF file first.",
        variant: "destructive",
      });
      return;
    }

    setIsAnalyzing(true);
    
    try {
      const response = await sendToWebhook(uploadedFile, fileName);
      
      if (response.success && response.results) {
        setAuditResults(response.results);
        setHasResults(true);
        toast({
          title: "Analysis complete",
          description: response.message || "Medical report audit completed successfully.",
        });
      } else {
        toast({
          title: "Analysis failed",
          description: response.error || "Failed to complete audit analysis.",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "Connection error",
        description: "Failed to connect to audit service.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleDownloadReport = () => {
    // Create a simple text report
    const report = `ANTISHTRAF AI - MEDICAL REPORT AUDIT
    
File: ${fileName}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

WEBHOOK RESPONSE:
${auditResults}

Generated by Antishtraf AI Medical Audit System
`;

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `audit-report-${fileName.replace('.pdf', '')}-${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        <Header />
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Upload Section */}
          <div className="space-y-4">
            <h2 className="text-xl font-semibold text-foreground">Upload Medical Report</h2>
            <PDFUploader 
              onFileProcessed={handleFileProcessed}
              isProcessing={isAnalyzing}
            />
            
            {uploadedFile && !isAnalyzing && (
              <Card className="p-4 bg-gradient-to-br from-card to-accent border border-primary/20">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="font-medium text-card-foreground">File Ready for Analysis</h3>
                  <Button 
                    onClick={handleSendToAudit}
                    disabled={isAnalyzing}
                    className="bg-primary hover:bg-primary-dark"
                  >
                    {isAnalyzing ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        Analyzing...
                      </>
                    ) : (
                      <>
                        <Send className="h-4 w-4 mr-2" />
                        Start Audit
                      </>
                    )}
                  </Button>
                </div>
                <div className="text-sm text-muted-foreground bg-muted/50 p-3 rounded">
                  <p><strong>File:</strong> {fileName}</p>
                  <p><strong>Size:</strong> {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB</p>
                  <p><strong>Type:</strong> PDF Document</p>
                </div>
              </Card>
            )}
          </div>

          {/* Results Section */}
          <div className="space-y-4">
            <h2 className="text-xl font-semibold text-foreground">Audit Analysis</h2>
            {isAnalyzing && (
              <Card className="p-8 text-center">
                <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4 text-primary" />
                <p className="text-muted-foreground">Analyzing medical report...</p>
                <p className="text-sm text-muted-foreground mt-2">This may take a few moments</p>
              </Card>
            )}
            
            {hasResults && !isAnalyzing && (
              <AuditResults 
                results={auditResults}
                fileName={fileName}
                onDownloadReport={handleDownloadReport}
              />
            )}
            
            {!uploadedFile && !isAnalyzing && (
              <Card className="p-8 text-center border-dashed border-2">
                <p className="text-muted-foreground">Upload a PDF file to begin audit analysis</p>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Index;
